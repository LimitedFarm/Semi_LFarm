/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.45
 * Generated at: 2019-10-14 15:37:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class FAQ_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<script src = \"/resource/js/jquery-3.2.1.min.js\"> </script>\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style>\r\n");
      out.write(".accordion {\r\n");
      out.write("  background-color: #eee;\r\n");
      out.write("  color: #444;\r\n");
      out.write("  cursor: pointer;\r\n");
      out.write("  padding: 18px;\r\n");
      out.write("  width: 75%;\r\n");
      out.write("  border: none;\r\n");
      out.write("  text-align: left;\r\n");
      out.write("  outline: none;\r\n");
      out.write("  font-size: 15px;\r\n");
      out.write("  transition: 0.4s;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".active, .accordion:hover {\r\n");
      out.write("  background-color: #ccc; \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".accordion:after {\r\n");
      out.write("  content: '\\002B';\r\n");
      out.write("  color: #777;\r\n");
      out.write("  font-weight: bold;\r\n");
      out.write("  float: right;\r\n");
      out.write("  margin-left: 5px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".active:after {\r\n");
      out.write("  content: \"\\2212\";\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(".panel {\r\n");
      out.write("  padding: 0 18px;\r\n");
      out.write("  background-color: white;\r\n");
      out.write("  max-height: 0;\r\n");
      out.write("  overflow: hidden;\r\n");
      out.write("  transition: max-height 0.3s ease-out;   \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".FQAbox {\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h2 align = \"center\">FQA</h2>\r\n");
      out.write("\t<hr><br>\r\n");
      out.write("\t\r\n");
      out.write("\t<div class = \"FQAbox\" align = \"center\">\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t<button class = \"accordion\">자주 묻는 질문1</button>\r\n");
      out.write("\t<div class = \"panel\">\r\n");
      out.write("\t\t<p>\r\n");
      out.write("\t\t자주 묻는 질문의 답1\r\n");
      out.write("\t\t</p>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<button class = \"accordion\">자주 묻는 질문2</button>\r\n");
      out.write("\t<div class = \"panel\">\r\n");
      out.write("\t\t<p>\r\n");
      out.write("\t\t자주 묻는 질문의 답2\r\n");
      out.write("\t\t</p>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<button class = \"accordion\">자주 묻는 질문3</button>\r\n");
      out.write("\t<div class = \"panel\">\r\n");
      out.write("\t\t<p>\r\n");
      out.write("\t\t자주 묻는 질문의 답3\r\n");
      out.write("\t\t</p>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("var acc = document.getElementsByClassName(\"accordion\");\r\n");
      out.write("var i;\r\n");
      out.write("\r\n");
      out.write("for (i = 0; i < acc.length; i++) {\r\n");
      out.write("  acc[i].addEventListener(\"click\", function() {\r\n");
      out.write("    this.classList.toggle(\"active\");\r\n");
      out.write("    var panel = this.nextElementSibling;\r\n");
      out.write("    if (panel.style.maxHeight) {\r\n");
      out.write("      panel.style.maxHeight = null;\r\n");
      out.write("    } else {\r\n");
      out.write("      panel.style.maxHeight = panel.scrollHeight + \"px\";\r\n");
      out.write("    }\r\n");
      out.write("  });\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
