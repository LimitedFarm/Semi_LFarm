/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.45
 * Generated at: 2019-10-17 15:23:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import LF.review.model.vo.*;
import java.util.*;

public final class ctx_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("LF.review.model.vo");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n");
      out.write("\r\n");
      out.write("<head runat=\"server\">\r\n");
      out.write("\r\n");
      out.write("    <title></title>\r\n");
      out.write("\r\n");
      out.write("    <script type=\"text/javascript\" src=\"../../script/jquery.js\"></script>\r\n");
      out.write("\r\n");
      out.write("    <style>\r\n");
      out.write("\r\n");
      out.write("        .reverse\r\n");
      out.write("\r\n");
      out.write("        {\r\n");
      out.write("\r\n");
      out.write("            background:Black;\r\n");
      out.write("\r\n");
      out.write("            color:White;\r\n");
      out.write("\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("    </style>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("    var foodlist = [];\r\n");
      out.write("\r\n");
      out.write("    foodlist.push({분류:'1류', 명칭:'고철3', 가격:3000});\r\n");
      out.write("\r\n");
      out.write("    foodlist.push({분류:'1류', 명칭:'고철23', 가격:3500});\r\n");
      out.write("\r\n");
      out.write("    foodlist.push({분류:'1류', 명칭:'고철1', 가격:3500});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            \r\n");
      out.write("\r\n");
      out.write("    for(var key in foodlist)\r\n");
      out.write("\r\n");
      out.write("    {\r\n");
      out.write("\r\n");
      out.write("        var data1 = foodlist[key].명칭 + \"\\t\" + foodlist[key].가격 + \"\\n\";\r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    function fill_div()\r\n");
      out.write("\r\n");
      out.write("    {\r\n");
      out.write("\r\n");
      out.write("        document.getElementById(\"testArea\").innerHTML=\"<input type='button' />\";\r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    // 페이지를 로드할때 수행합니다. onLoad 처럼.\r\n");
      out.write("\r\n");
      out.write("    $(document).ready(function () {\r\n");
      out.write("\r\n");
      out.write("        // <h3> 태그의 색상을 blue로 찾아서 변경해줍니다.\r\n");
      out.write("\r\n");
      out.write("        $('h3').css('color', 'blue');\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        // class 를 추가합니다. 속성을 추가할 수 있습니다.\r\n");
      out.write("\r\n");
      out.write("        $('h3').addClass('item');\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        // class 를 추가합니다. 속성을 추가할 수 있습니다. (콜백함수)\r\n");
      out.write("\r\n");
      out.write("        $('h3').addClass(function (index) {\r\n");
      out.write("\r\n");
      out.write("            return 'class' + index;\r\n");
      out.write("\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        //h1 태그의 스타일을 배열에 있는 색상으로 지정합니다.\r\n");
      out.write("\r\n");
      out.write("        var color = ['Red', 'Green', 'Purple'];\r\n");
      out.write("\r\n");
      out.write("        $('h1').css('color', function (index) {\r\n");
      out.write("\r\n");
      out.write("            return color[index];\r\n");
      out.write("\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        //h1 태그의 스타일을 배열에 있는 색상으로 지정합니다. (배경색을 지정합니다)\r\n");
      out.write("\r\n");
      out.write("        var color = ['Red', 'Green', 'Purple'];\r\n");
      out.write("\r\n");
      out.write("        $('h1').css({\r\n");
      out.write("\r\n");
      out.write("            color: function (index) {\r\n");
      out.write("\r\n");
      out.write("                return color[index];\r\n");
      out.write("\r\n");
      out.write("            }, backgroundColor: 'Black'\r\n");
      out.write("\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        //<h1> 태그에 문자열 추가하기 (내용추가)\r\n");
      out.write("\r\n");
      out.write("        $('h1').html(function (index, html) {\r\n");
      out.write("\r\n");
      out.write("            return '★' + html + '☆';\r\n");
      out.write("\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        //동적으로 body에 객체생성하기\r\n");
      out.write("\r\n");
      out.write("        $('<h1>동적으로 삽입</h1>').appendTo('body');\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        // 이벤트 연결하기\r\n");
      out.write("\r\n");
      out.write("        //h1 태그중 h1click 라는 id를 클릭하면 문자에 +를 붕ㅌ여 준다.\r\n");
      out.write("\r\n");
      out.write("        $('h1#h1click').bind('click', function () {\r\n");
      out.write("\r\n");
      out.write("            $(this).html(function (index, html) {\r\n");
      out.write("\r\n");
      out.write("                return html + '+';\r\n");
      out.write("\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 마우스 올렸을 경우 이벤트\r\n");
      out.write("\r\n");
      out.write("        // 마우스를 올리면 Style를 추가해준다.\r\n");
      out.write("\r\n");
      out.write("        // bind 이벤트는 한번에 여러 종류의 이벤트를 연결하거나 간단한 이벤트를 연결할 수 없을 때 사용.\r\n");
      out.write("\r\n");
      out.write("        $('h1#h1style').bind({\r\n");
      out.write("\r\n");
      out.write("            mouseenter: function () { $(this).addClass('reverse') },\r\n");
      out.write("\r\n");
      out.write("            mouseleave: function () { $(this).removeClass('reverse'); }\r\n");
      out.write("\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        //이벤트 연결하기 hover\r\n");
      out.write("\r\n");
      out.write("        $('h1#h1style2').hover(function () {\r\n");
      out.write("\r\n");
      out.write("            $(this).addClass('reverse');\r\n");
      out.write("\r\n");
      out.write("        }, function () {\r\n");
      out.write("\r\n");
      out.write("            $(this).removeClass('reverse');\r\n");
      out.write("\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        // 그림태그의 속성을 정의 합니다. (사이즈 변경처리)\r\n");
      out.write("\r\n");
      out.write("        $('img.image1').attr({\r\n");
      out.write("\r\n");
      out.write("            width: function (index) {\r\n");
      out.write("\r\n");
      out.write("                return (index + 1) * 100;\r\n");
      out.write("\r\n");
      out.write("            }, height: 100\r\n");
      out.write("\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        // 함수실행 2초마다 첫번째 이미지를 마지막으로 보낸다\r\n");
      out.write("\r\n");
      out.write("        setInterval(function () {\r\n");
      out.write("\r\n");
      out.write("            $('img.image2').first().appendTo($('div#imagelist')); //imagelist 이름의 id의 위치에 image2이름인 class의 이미지를 붙여 넣는다.\r\n");
      out.write("\r\n");
      out.write("        }, 2000);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        // 타이머를 이용하여 현재 시간을 출력합니다.\r\n");
      out.write("\r\n");
      out.write("        var clock = document.getElementById('clock');\r\n");
      out.write("\r\n");
      out.write("        setInterval(function () {\r\n");
      out.write("\r\n");
      out.write("            var now = new Date();\r\n");
      out.write("\r\n");
      out.write("            clock.innerHTML = now.toString();\r\n");
      out.write("\r\n");
      out.write("        }, 1000);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        // 콤보를 수정할 경우 5초 타이머 이후 출력합니다.\r\n");
      out.write("\r\n");
      out.write("        // select > option 은 select 의 부모를 이야기함.\r\n");
      out.write("\r\n");
      out.write("        //        setTimeout(function(){\r\n");
      out.write("\r\n");
      out.write("        //            var value = $('select > option:selected').val();\r\n");
      out.write("\r\n");
      out.write("        //            alert(value);\r\n");
      out.write("\r\n");
      out.write("        //            }, 5000);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        //textare의 글짜 갯수를 출력한다.\r\n");
      out.write("\r\n");
      out.write("        $('textarea').keyup(function () {\r\n");
      out.write("\r\n");
      out.write("            var inputLength = $(this).val().length;\r\n");
      out.write("\r\n");
      out.write("            var remain = 150 - inputLength;\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            $('h2#rtext').html(remain);\r\n");
      out.write("\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        // 자동으로 늘어다는 스크롤\r\n");
      out.write("\r\n");
      out.write("        // 스크롤 이벤트시 발생\r\n");
      out.write("\r\n");
      out.write("        $(window).scroll(function () {\r\n");
      out.write("\r\n");
      out.write("            var scrollHeight = $(window).scrollTop() + $(window).height();\r\n");
      out.write("\r\n");
      out.write("            var documentHeight = $(document).height();\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            if (scrollHeight + 200 >= documentHeight) {\r\n");
      out.write("\r\n");
      out.write("                for (var i = 0; i < 10; i++) {\r\n");
      out.write("\r\n");
      out.write("                    //스크롤이 내려가면 pagebottom 하단에 문자열을 추가한다. \r\n");
      out.write("\r\n");
      out.write("                    //(예: Mixsh.com 하단에 데이타 가져오는 부분처럼)\r\n");
      out.write("\r\n");
      out.write("                    $('<h1>Infinity Scroll</h1>').appendTo('H2#pagebottom'); \r\n");
      out.write("\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    </script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("    <form id=\"form1\" runat=\"server\">\r\n");
      out.write("\r\n");
      out.write("    <div>\r\n");
      out.write("\r\n");
      out.write("        <h1>sdfsdafsdfsda</h1>\r\n");
      out.write("\r\n");
      out.write("        <h1 id=\"h1click\">h1 click event add : bind()</h1>\r\n");
      out.write("\r\n");
      out.write("        <h1>sdfsdafsdfsda</h1>\r\n");
      out.write("\r\n");
      out.write("        <h1 id=\"h1style\">mouse enter style!</h1>\r\n");
      out.write("\r\n");
      out.write("        <h1 id=\"h1style2\">mouse hover event style!</h1>\r\n");
      out.write("\r\n");
      out.write("        <input type=\"button\" value=\"click!\" onclick=\"fill_div();\" />   \r\n");
      out.write("\r\n");
      out.write("        <div id=\"clock\"></div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <select>\r\n");
      out.write("\r\n");
      out.write("            <option>Apple</option>\r\n");
      out.write("\r\n");
      out.write("            <option>Cat</option>\r\n");
      out.write("\r\n");
      out.write("            <option>Dog</option>\r\n");
      out.write("\r\n");
      out.write("        </select>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <img src='1-1.jpg' class =\"image1\" />\r\n");
      out.write("\r\n");
      out.write("        <img src='1-1.jpg' class =\"image1\" />\r\n");
      out.write("\r\n");
      out.write("        <img src='1-1.jpg' class =\"image1\" />\r\n");
      out.write("\r\n");
      out.write("        <br />\r\n");
      out.write("\r\n");
      out.write("        <br />\r\n");
      out.write("\r\n");
      out.write("        <div id=\"imagelist\">\r\n");
      out.write("\r\n");
      out.write("            <img src='images/1.jpg' class =\"image2\" />\r\n");
      out.write("\r\n");
      out.write("            <img src='images/2.jpg' class =\"image2\" />\r\n");
      out.write("\r\n");
      out.write("            <img src='images/3.jpg' class =\"image2\" />\r\n");
      out.write("\r\n");
      out.write("            <img src='images/4.jpg' class =\"image2\" />\r\n");
      out.write("\r\n");
      out.write("            <img src='images/5.jpg' class =\"image2\" />\r\n");
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <div></div>\r\n");
      out.write("\r\n");
      out.write("        <div></div>\r\n");
      out.write("\r\n");
      out.write("        <div></div>\r\n");
      out.write("\r\n");
      out.write("        <br />\r\n");
      out.write("\r\n");
      out.write("        <div>\r\n");
      out.write("\r\n");
      out.write("            <textarea cols=\"70\" rows=\"5\"></textarea>\r\n");
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <h2 id=\"rtext\">150</h1>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <h2 id=\"pagebottom\"></h2>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    </form>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("출처: https://ndolson.com/2166 [엔돌슨의 IT이야기]");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
