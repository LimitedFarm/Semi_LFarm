/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.45
 * Generated at: 2019-10-13 17:03:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Sample_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<style>\r\n");
      out.write("/* 바탕 배경 이미지 */\r\n");
      out.write(".pop-address-search .pop-address-search-inner { background-image: url(http://www.0000.com/img/backImg.png);}\r\n");
      out.write("/* 회사 로고 이미지 */\r\n");
      out.write(".pop-address-search .pop-address-search-inner .logo { background: url(http://www.0000.com/img/logo.png) no-repeat; background-position:center; }\r\n");
      out.write("\r\n");
      out.write("/* 바탕 배경색상 */\r\n");
      out.write(".pop-address-search .pop-address-search-inner { background-color:#ECECEC; }\r\n");
      out.write("/* 검색창 색상 */\r\n");
      out.write(".pop-address-search .pop-address-search-inner .wrap input { background-color:#FFFFFF; }\r\n");
      out.write("/* 검색버튼 색상 */\r\n");
      out.write(".pop-address-search .pop-address-search-inner .wrap { background-color:#FFFFFF; }\r\n");
      out.write("/* 본문 배경색(홀수) */\r\n");
      out.write(".pop-address-search .pop-address-search-inner .result table.data-col tbody tr:nth-child(odd) td {background:#FFFFFF}\r\n");
      out.write("/* 본문 배경색(짝수) */\r\n");
      out.write(".pop-address-search .pop-address-search-inner .result table.data-col tbody tr:nth-child(even) td {background:#FFFFFF}\r\n");
      out.write("</style>\r\n");
      out.write("<script language=\"javascript\">\r\n");
      out.write("// opener관련 오류가 발생하는 경우 아래 주석을 해지하고, 사용자의 도메인정보를 입력합니다.\r\n");
      out.write("// (＂팝업 API 호출 소스\"도 동일하게 적용시켜야 합니다.)\r\n");
      out.write("//document.domain = \"abc.go.kr\";\r\n");
      out.write("function goPopup(){\r\n");
      out.write("//경로는 시스템에 맞게 수정하여 사용\r\n");
      out.write("//호출된 페이지(jusopopup.jsp)에서 실제 주소검색URL(http://www.juso.go.kr/addrlink/addrLinkUrl.do)를\r\n");
      out.write("//호출하게 됩니다.\r\n");
      out.write("var pop = window.open(\"/LimitedF/jusoPopup.jsp\",\"pop\",\"width=570,height=420, scrollbars=yes, resizable=yes\");\r\n");
      out.write("//** 2017년 5월 모바일용 팝업 API 기능 추가제공 **/\r\n");
      out.write("// 모바일 웹인 경우, 호출된 페이지(jusopopup.jsp)에서\r\n");
      out.write("// 실제 주소검색 URL(http://www.juso.go.kr/addrlink/addrMobileLinkUrl.do)를 호출하게 됩니다.\r\n");
      out.write("// var pop = window.open(\"/popup/jusoPopup.jsp\",\"pop\",\"scrollbars=yes, resizable=yes\");\r\n");
      out.write("}\r\n");
      out.write("function jusoCallBack(roadFullAddr,roadAddrPart1,addrDetail,roadAddrPart2,engAddr, jibunAddr, zipNo, admCd,\r\n");
      out.write("rnMgtSn, bdMgtSn , detBdNmList, bdNm, bdKdcd, siNm, sggNm, emdNm, liNm, rn, udrtYn, buldMnnm,\r\n");
      out.write("buldSlno, mtYn, lnbrMnnm, lnbrSlno, emdNo){\r\n");
      out.write(" // 2017년 2월 제공항목이 추가되었습니다. 원하시는 항목을 추가하여 사용하시면 됩니다.\r\n");
      out.write(" document.form.roadFullAddr.value = roadFullAddr;\r\n");
      out.write(" document.form.roadAddrPart1.value = roadAddrPart1;\r\n");
      out.write(" document.form.roadAddrPart2.value = roadAddrPart2;\r\n");
      out.write(" documentform.addrDetail.value = addrDetail;\r\n");
      out.write(" document.form.zipNo.value = zipNo;\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<form name=\"form\" id=\"form\" method=\"post\">\r\n");
      out.write("<input type=\"button\" onClick=\"goPopup();\" value=\"팝업\"/>\r\n");
      out.write("도로명주소 전체(포맷)<input type=\"text\" id=\"roadFullAddr\" name=\"roadFullAddr\" /><br>\r\n");
      out.write("도로명주소 <input type=\"text\" id=\"roadAddrPart1\" name=\"roadAddrPart1\" /><br>\r\n");
      out.write("고객입력 상세주소<input type=\"text\" id=\"addrDetail\" name=\"addrDetail\" /><br>\r\n");
      out.write("참고주소<input type=\"text\" id=\"roadAddrPart2\" name=\"roadAddrPart2\" /><br>\r\n");
      out.write("우편번호<input type=\"text\" id=\"zipNo\" name=\"zipNo\" />\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
